# SPDX-FileCopyrightText: Â© 2024 Dave Conroy <dave@tiredofit.ca>
#
# SPDX-License-Identifier: MIT

showoff
alias env='with-contenv env | sort'

service_down() {
    if [ -n "${1}" ]; then
        case "${1}" in
            all )
                echo "** Disabling all services"
                for service in /var/run/s6/legacy-services/* ; do
                    echo "** Disabling s6 service '$(basename ${service})'"
                    s6-svc -d /var/run/s6/legacy-services/$(basename ${service})
                done
            ;;
            * )
                if [ -d "/var/run/s6/legacy-services/${1}" ] ; then
                    echo "** Disabling s6 service '$1'"
                    s6-svc -d /var/run/s6/legacy-services/$1
                fi
            ;;
        esac
    fi
}

service_list() {
    ls -1 /var/run/s6/legacy-services
}

service_reset() {
    if [ -n "${1}" ]; then
        case "${1}" in
            all )
                echo "** Resetting all services"
                for service in /var/run/s6/legacy-services/* ; do
                    echo "** Reset s6 service '$(basename ${service})'"
                    rm -rf /container/state/run/"$(basename ${service})"
                    #s6-svc -u /var/run/s6/legacy-services/$(basename ${service})
                done
            ;;
            * )
                if [ -d "/var/run/s6/legacy-services/${1}" ] ; then
                    echo "** Reset s6 service '${1}'"
                    rm -rf /container/state/run/"${1}"
                fi
            ;;
        esac
    fi
}

service_up() {
    if [ -n "${1}" ]; then
        case "${1}" in
            all )
                echo "** Enabling all services"
                for service in /var/run/s6/legacy-services/* ; do
                    echo "** Enabling s6 service '$(basename ${service})'"
                    s6-svc -u /var/run/s6/legacy-services/$(basename ${service})
                done
            ;;
            * )
                if [ -d "/var/run/s6/legacy-services/${1}" ] ; then
                    echo "** Enabling s6 service '${1}'"
                    s6-svc -u /var/run/s6/legacy-services/${1}
                fi
            ;;
        esac
    fi
}

zcat () {
    if [ -f "$@" ] ; then
        case "$@" in
            *.zst* )    $(which zcat) "$@" ;;
            *.bz*)      $(which zcat) "$@" ;;
            *.gz*)      $(which zcat) "$@" ;;
            *.xz)       $(which zcat) "$@" ;;
        esac
    else
        echo "'$@' is not a valid file!"
    fi
}

## Show last changelog version and details of current running image
if [ -f "/container/build/${IMAGE_NAME/\//_}/CHANGELOG.md" ] ; then
    changelogname="/container/build/${IMAGE_NAME/\//_}/CHANGELOG.md"
elif [ -f /container/build/docker-${IMAGE_NAME/\//_}/CHANGELOG.md ] ; then
    changelogname="/container/build/docker-${IMAGE_NAME/\//_}/CHANGELOG.md"
else
    if [ -f /container/build/tiredofit_docker-${IMAGE_NAME/\//_}/CHANGELOG.md ] ; then
        changelogname="/container/build/tiredofit_docker-${IMAGE_NAME/\//_}/CHANGELOG.md"
    else
        strip_image_repo_url=$(echo ${IMAGE_REPO_URL%/} | sed "s#https://github.com/##g")
        if [ -f /container/build/${strip_image_repo_url/\//_}/CHANGELOG.md ] ; then
            changelogname="/container/build/${strip_image_repo_url/\//_}/CHANGELOG.md"
        fi
    fi
fi

## Add Support to list all Changelogs known of all base images
image_version() {
    for clname in "$(ls -t -r /container/build/)" ; do
        if [ -f "${clname}"/CHANGELOG.md ]; then
            version=$(head -n 1 "${clname}"/CHANGELOG.md | awk '{print $2}')
            echo "Image: $(basename $clname) $version"
        fi
    done
}

if [ -z "${changelogname// }" ] ; then
    image_changelog() {
        echo "** Sorry - I do not know what image this is. Check if there are changelogs in /container/image"
    }
else
    image_changelog() {
        echo "** Showing the most recent version entry changelog for ${IMAGE_NAME} - See more at /container/image"
        awk '/^##/{p++} p==2{print; exit} p>=1' $changelogname | sed '$d'
    }
fi

## Rewrite Bash Prompt
if [ -n "${CONTAINER_CUSTOM_BASH_PROMPT}" ] ; then
    bash_prompt=${CONTAINER_CUSTOM_BASH_PROMPT}
else
    image_version=$(get_image_version)
    if [ ! -z "${image_version// }" ] ; then
        bash_ver=":${image_version}"
    fi
    bash_prompt="[${IMAGE_NAME}${bash_ver} \\t \\w] $ "
fi

export PS1="${bash_prompt/  /}"
